"""M√≥dulo de an√°lisis de resultados impulsado por IA usando Google Gemini.

Este m√≥dulo proporciona funcionalidades para analizar los resultados de escaneo
de vulnerabilidades y generar res√∫menes ejecutivos usando la API de Google Gemini.
"""

import logging
from typing import Optional

try:
    import google.generativeai as genai

    GENAI_AVAILABLE = True
except ImportError:
    genai = None  # type: ignore[assignment]
    GENAI_AVAILABLE = False

# Configurar logger
logger = logging.getLogger(__name__)


def get_gemini_summary(api_key: str, scan_results: str) -> Optional[str]:
    """Genera un resumen ejecutivo de los resultados de escaneo usando Google Gemini.

    Args:
        api_key: Clave de API de Google Gemini
        scan_results: Datos concatenados de los resultados del escaneo

    Returns:
        Resumen ejecutivo generado por IA o None si falla
    """
    if not GENAI_AVAILABLE or genai is None:
        logger.error("La librer√≠a google-generativeai no est√° instalada")
        return None

    if not api_key or not scan_results:
        logger.error("API key o scan_results est√°n vac√≠os")
        return None

    try:
        # Configurar el cliente de Gemini
        genai.configure(api_key=api_key)

        # Seleccionar el modelo optimizado para velocidad y costo
        model = genai.GenerativeModel("gemini-1.5-flash-latest")

        # Prompt avanzado v2.1 con puntuaci√≥n de riesgo y vectores de ataque
        system_prompt = """
Act√∫a como un Analista Experto en Ciberseguridad con m√°s de 10 a√±os de experiencia en Bug Bounty y Pentesting.

Tu tarea es analizar los resultados de un escaneo de reconocimiento y generar un reporte
    t√©cnico avanzado con puntuaci√≥n de riesgo, vectores de ataque y recomendaciones t√°cticas espec√≠ficas.

FORMATO DE SALIDA REQUERIDO:

## üõ°Ô∏è Reporte de An√°lisis de Seguridad
### üìä Puntuaci√≥n de Riesgo Global: [X]/10

### üéØ Resumen Ejecutivo
[P√°rrafo conciso describiendo el alcance del escaneo, n√∫mero de subdominios encontrados,
puertos abiertos y vulnerabilidades detectadas con contexto de riesgo]

### üö® Hallazgos Cr√≠ticos Priorizados
| Severidad | Vulnerabilidad | Host Afectado | Impacto | Explotabilidad |
|-----------|----------------|---------------|---------|----------------|
| [CRITICAL/HIGH/MEDIUM] | [Nombre] | [Host] | [Descripci√≥n] | [Facilidad 1-5] |

### ‚öîÔ∏è Tabla de Vectores de Ataque
| Vector | Activos Afectados | T√©cnicas Sugeridas | Herramientas Recomendadas |
|--------|-------------------|-------------------|---------------------------|
| [Tipo] | [Lista hosts] | [T√©cnicas espec√≠ficas] | [nmap, ffuf, burp, etc.] |

### üåê Superficie de Ataque Identificada
- **Servicios Web Expuestos**: [Lista con tecnolog√≠as detectadas]
- **Puertos Sensibles Abiertos**: [SSH, RDP, bases de datos, etc.]
- **Subdominios de Alto Valor**: [admin, api, dev, staging, etc.]
- **Tecnolog√≠as Vulnerables**: [Versiones desactualizadas identificadas]

### üìã Recomendaciones T√°cticas
#### üî¥ Acciones Inmediatas (0-24h)
```bash
# Comandos espec√≠ficos para investigaci√≥n inmediata
[comandos nmap, ffuf, curl espec√≠ficos]
```

#### üü° Investigaci√≥n Adicional (1-7 d√≠as)
- **Fuzzing Avanzado**: [Directorios y par√°metros espec√≠ficos a probar]
- **An√°lisis Manual**: [Endpoints espec√≠ficos para revisi√≥n manual]
- **T√©cnicas de Bypass**: [WAF, autenticaci√≥n, etc.]

#### üü¢ Monitoreo Continuo
- **Subdominios a Vigilar**: [Lista para monitoreo]
- **Cambios de Configuraci√≥n**: [Servicios a supervisar]

CRITERIOS DE AN√ÅLISIS AVANZADOS:
- Calcula puntuaci√≥n de riesgo basada en: severidad √ó exposici√≥n √ó facilidad de explotaci√≥n
- Prioriza vectores con mayor potencial de impacto en el negocio
- Proporciona comandos bash espec√≠ficos y listos para ejecutar
- Identifica patrones de configuraci√≥n insegura y malas pr√°cticas
- Sugiere t√©cnicas de post-explotaci√≥n cuando sea apropiado
- Mapea hallazgos a frameworks como OWASP Top 10 y MITRE ATT&CK

Si no encuentras vulnerabilidades cr√≠ticas, enf√≥cate en vectores de ataque potenciales y
oportunidades de investigaci√≥n que podr√≠an revelar vulnerabilidades adicionales.
"""

        # Construir el prompt completo
        full_prompt = f"{system_prompt}\n\nDATOS DEL ESCANEO A ANALIZAR:\n{scan_results}"

        logger.info("Enviando datos a Gemini para an√°lisis...")

        # Generar el resumen usando Gemini
        response = model.generate_content(
            full_prompt,
            generation_config=genai.types.GenerationConfig(
                temperature=0.3,  # Respuestas m√°s consistentes
                max_output_tokens=2048,  # L√≠mite razonable para el resumen
                top_p=0.8,
                top_k=40,
            ),
        )

        if response and hasattr(response, "text") and response.text:
            logger.info("Resumen de IA generado exitosamente")
            return str(response.text).strip()
        logger.error("Gemini no devolvi√≥ contenido v√°lido")
        return None

    except Exception as e:
        logger.error(f"Error al generar resumen con Gemini: {e}")
        return None


def get_gemini_alert(api_key: str, nuclei_finding: str) -> Optional[str]:
    """Genera una alerta concisa de un hallazgo individual de Nuclei usando Google Gemini.

    Args:
        api_key: Clave de API de Google Gemini
        nuclei_finding: Hallazgo individual de Nuclei en formato JSON

    Returns:
        Alerta concisa (m√°ximo 280 caracteres) o None si falla
    """
    if not GENAI_AVAILABLE or genai is None:
        logger.error("La librer√≠a google-generativeai no est√° instalada")
        return None

    if not api_key or not nuclei_finding:
        logger.error("API key o nuclei_finding est√°n vac√≠os")
        return None

    try:
        # Configurar el cliente de Gemini
        genai.configure(api_key=api_key)

        # Seleccionar el modelo optimizado para velocidad y costo
        model = genai.GenerativeModel("gemini-1.5-flash-latest")

        # Prompt espec√≠fico para alertas concisas
        alert_prompt = """
Act√∫a como un sistema de alerta de ciberseguridad. Analiza el siguiente hallazgo de Nuclei y
genera una alerta en una sola frase (m√°ximo 280 caracteres) que describa el riesgo cr√≠tico y
el activo afectado. Formato: [Severidad] - [Tipo de Vulnerabilidad] en [Host].
"""

        # Construir el prompt completo
        full_prompt = f"{alert_prompt}\n\nHALLAZGO DE NUCLEI:\n{nuclei_finding}"

        logger.info("Generando alerta concisa con Gemini...")

        # Generar la alerta usando Gemini
        response = model.generate_content(
            full_prompt,
            generation_config=genai.types.GenerationConfig(
                temperature=0.2,  # Respuestas m√°s consistentes y concisas
                max_output_tokens=100,  # L√≠mite estricto para alertas cortas
                top_p=0.7,
                top_k=20,
            ),
        )

        if response and hasattr(response, "text") and response.text:
            alert_text = str(response.text).strip()
            # Asegurar que la alerta no exceda 280 caracteres
            if len(alert_text) > 280:
                alert_text = alert_text[:277] + "..."
            logger.info("Alerta de IA generada exitosamente")
            return alert_text
        logger.error("Gemini no devolvi√≥ contenido v√°lido para la alerta")
        return None

    except Exception as e:
        logger.error(f"Error al generar alerta con Gemini: {e}")
        return None
