"""M칩dulo de an치lisis con IA usando Google Gemini.

Este m칩dulo proporciona funcionalidad para generar res칰menes inteligentes
de los resultados de escaneo usando la API de Google Gemini.
"""

import logging
from typing import Optional

try:
    import google.generativeai as genai
except ImportError:
    genai = None

# Configurar logger
logger = logging.getLogger(__name__)


def get_gemini_summary(api_key: str, scan_results: str) -> Optional[str]:
    """Genera un resumen ejecutivo de los resultados de escaneo usando Gemini.

    Args:
        api_key: Clave de API de Google Gemini
        scan_results: Resultados del escaneo concatenados

    Returns:
        Resumen generado por IA o None si falla

    Raises:
        ValueError: Si api_key o scan_results est치n vac칤os
        ImportError: Si google-generativeai no est치 instalado
    """
    # Verificar que la librer칤a est칠 disponible
    if genai is None:
        logger.error("google-generativeai no est치 instalado. Instala con: pip install google-generativeai")
        raise ImportError("google-generativeai no est치 disponible")

    # Validaci칩n de entrada
    if not api_key or not api_key.strip():
        logger.error("api_key no puede estar vac칤o")
        raise ValueError("api_key no puede estar vac칤o")

    if not scan_results or not scan_results.strip():
        logger.error("scan_results no puede estar vac칤o")
        raise ValueError("scan_results no puede estar vac칤o")

    try:
        # Configurar el cliente de Gemini
        genai.configure(api_key=api_key.strip())

        # Inicializar el modelo
        model = genai.GenerativeModel("gemini-pro")

        # Construir el prompt para el an치lisis
        prompt = _build_analysis_prompt(scan_results.strip())

        logger.info("Enviando resultados a Gemini para an치lisis...")

        # Generar el resumen
        response = model.generate_content(
            prompt,
            generation_config=genai.types.GenerationConfig(
                temperature=0.3,  # Respuestas m치s consistentes
                max_output_tokens=2048,  # L칤mite de tokens de salida
                top_p=0.8,
                top_k=40,
            ),
        )

        # Verificar que la respuesta sea v치lida
        if response and response.text:
            logger.info("Resumen de IA generado exitosamente")
            return response.text.strip()
        logger.warning("Gemini no gener칩 contenido v치lido")
        return None

    except Exception as e:
        logger.error(f"Error al generar resumen con Gemini: {str(e)}")
        return None


def _build_analysis_prompt(scan_results: str) -> str:
    """Construye el prompt para el an치lisis de Gemini.

    Args:
        scan_results: Resultados del escaneo

    Returns:
        Prompt formateado para Gemini
    """
    prompt = f"""Act칰a como un analista senior de ciberseguridad especializado en bug bounty y pentesting.

Analiza los siguientes resultados de escaneo de reconocimiento y proporciona un resumen ejecutivo profesional.

## INSTRUCCIONES:
1. **Resumen Ejecutivo**: Proporciona una visi칩n general concisa del estado de seguridad del objetivo
2. **Top 3 Hallazgos Cr칤ticos**: Identifica y prioriza los 3 hallazgos m치s importantes desde una perspectiva de seguridad
3. **Recomendaciones**: Sugiere los pr칩ximos pasos espec칤ficos para la investigaci칩n
4. **Superficie de Ataque**: Eval칰a la superficie de ataque expuesta

## FORMATO DE RESPUESTA:
Usa formato Markdown con las siguientes secciones:

### 游꿢 Resumen Ejecutivo
[Tu an치lisis aqu칤]

### 丘멆잺 Top 3 Hallazgos Cr칤ticos
1. **[Hallazgo 1]**: [Descripci칩n y impacto]
2. **[Hallazgo 2]**: [Descripci칩n y impacto]
3. **[Hallazgo 3]**: [Descripci칩n y impacto]

### 游댌 Pr칩ximos Pasos Recomendados
- [Recomendaci칩n 1]
- [Recomendaci칩n 2]
- [Recomendaci칩n 3]

### 游늵 Superficie de Ataque
[Evaluaci칩n de la superficie de ataque]

## RESULTADOS DEL ESCANEO:
```
{scan_results}
```

Proporciona un an치lisis profesional, conciso y accionable. Enf칩cate en hallazgos que sean relevantes para bug bounty y pentesting."""

    return prompt


def save_ai_summary(summary: str, output_file: str) -> bool:
    """Guarda el resumen de IA en un archivo.

    Args:
        summary: Resumen generado por IA
        output_file: Ruta del archivo de salida

    Returns:
        True si se guard칩 exitosamente, False en caso contrario
    """
    try:
        with open(output_file, "w", encoding="utf-8") as f:
            f.write("# Resumen de An치lisis de IA\n\n")
            f.write("Generado por Ultra-BugBountyScanner usando Google Gemini\n\n")
            f.write("---\n\n")
            f.write(summary)

        logger.info(f"Resumen de IA guardado en: {output_file}")
        return True

    except Exception as e:
        logger.error(f"Error al guardar resumen de IA: {str(e)}")
        return False


def format_scan_data_for_ai(
    subdomains_file: Optional[str] = None,
    ports_file: Optional[str] = None,
    vulnerabilities_file: Optional[str] = None,
    web_assets_file: Optional[str] = None,
) -> str:
    """Formatea los datos de escaneo para el an치lisis de IA.

    Args:
        subdomains_file: Ruta al archivo de subdominios
        ports_file: Ruta al archivo de puertos
        vulnerabilities_file: Ruta al archivo de vulnerabilidades
        web_assets_file: Ruta al archivo de assets web

    Returns:
        Datos formateados para el an치lisis
    """
    scan_data_parts = []

    # Leer subdominios
    if subdomains_file:
        try:
            with open(subdomains_file, encoding="utf-8") as f:
                subdomains = f.read().strip()
                if subdomains:
                    scan_data_parts.append(f"=== SUBDOMINIOS ENCONTRADOS ===\n{subdomains}\n")
        except Exception as e:
            logger.warning(f"No se pudo leer archivo de subdominios: {e}")

    # Leer puertos
    if ports_file:
        try:
            with open(ports_file, encoding="utf-8") as f:
                ports = f.read().strip()
                if ports:
                    scan_data_parts.append(f"=== ESCANEO DE PUERTOS ===\n{ports}\n")
        except Exception as e:
            logger.warning(f"No se pudo leer archivo de puertos: {e}")

    # Leer vulnerabilidades
    if vulnerabilities_file:
        try:
            with open(vulnerabilities_file, encoding="utf-8") as f:
                vulnerabilities = f.read().strip()
                if vulnerabilities:
                    scan_data_parts.append(f"=== VULNERABILIDADES DETECTADAS ===\n{vulnerabilities}\n")
        except Exception as e:
            logger.warning(f"No se pudo leer archivo de vulnerabilidades: {e}")

    # Leer assets web
    if web_assets_file:
        try:
            with open(web_assets_file, encoding="utf-8") as f:
                web_assets = f.read().strip()
                if web_assets:
                    scan_data_parts.append(f"=== ASSETS WEB ACTIVOS ===\n{web_assets}\n")
        except Exception as e:
            logger.warning(f"No se pudo leer archivo de assets web: {e}")

    if not scan_data_parts:
        return "No se encontraron datos de escaneo para analizar."

    return "\n".join(scan_data_parts)
